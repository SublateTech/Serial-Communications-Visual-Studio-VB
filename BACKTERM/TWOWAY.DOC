Declare Function lclose Lib "Kernel" Alias "_lclose" (ByVal hFile As Integer) As Integer
Declare Function lcreat Lib "Kernel" Alias "_lcreat" (ByVal lpPathName As String, ByVal iAttribute As Integer) As Integer
Declare Function lopen Lib "Kernel" Alias "_lopen" (ByVal lpPathName As String, ByVal iReadWrite As Integer) As Integer
Declare Function lread Lib "Kernel" Alias "_lread" (ByVal hFile As Integer, ByVal lpBuffer As String, ByVal wBytes As Integer) As Integer
Declare Function lwrite Lib "Kernel" Alias "_lwrite" (ByVal hFile As Integer, ByVal lpBuffer As String, ByVal wBytes As Integer) As Integer

Declare Function GetTickCount Lib "User" () As Long

Declare Function GetPrivateProfileString Lib "Kernel" (ByVal lpApplicationName As String, lpKeyName As Any, ByVal lpDefault As String, ByVal lpReturnedString As String, ByVal nSize As Integer, ByVal lpFilename As String) As Integer
Declare Function WritePrivateProfileString Lib "Kernel" (ByVal lpApplicationName As String, lpKeyName As Any, lpString As Any, ByVal lplFileName As String) As Integer

Declare Function GetModuleHandle Lib "Kernel" (ByVal lpModuleName As String) As Integer
Declare Function GetModuleUsage Lib "Kernel" (ByVal hModule As Integer) As Integer
Declare Function GetModuleFileName Lib "Kernel" (ByVal hModule As Integer, ByVal lpFilename As String, ByVal nSize As Integer) As Integer


Dim lLastBlock As Integer
Dim BID As String        'Line Bid (ENQ)

Dim NUL As String         '0
Dim SOH As String         '1
Dim STX As String         '2
Dim ETX As String         '3
Dim EOT As String         '4
Dim ENQ As String         '5        'Enquiry
Dim DLE As String         '10
Dim NAK As String         '15
Dim ETB As String         '17

Dim ACK As String
Dim ACK0 As String                  '= Chr(16) + Chr(48)
Dim ACK1 As String                  '= Chr(16) + Chr(49)
Dim DISC As String                  ' Chr(16) + Chr(4)
Dim WACK As String                  'Chr(16) + Chr(59)
Dim TTD As String                   'Chr(2) + Chr(5)
Dim FATAL_ERROR As String
Dim OK As String

Dim ACKP As String

Dim cComando As String
Dim cBlock As String
Dim cLoginId As String

'Files
Dim FILENUM As Integer
Dim FileName As String
Dim CRLF As String
Dim BUFFERLEN As Integer
Dim cArchivos_Enviar As String
Dim cArchivos_Recibir As String
Dim cArchivos_Borrar As String
Dim cInstancia As String
Dim cHora_Borrar As String
Dim cHora_Recibir As String
Dim cHora_Enviar As String
Dim cDirectorio_Enviar As String
Dim cDirectorio_Recibir As String
Dim lActivo As Integer
Dim cDirectorio_Programa As String
Sub Abre_Archivo (cArchivo$)
    FileName = cArchivo
    FILENUM = lopen(cDirectorio_Enviar + IIf(Right(cDirectorio_Enviar, 1) = "\", "", "\") + cArchivo, 0)
    If FILENUM = 0 Then
       Mensaje "No existe Archivo..."
    End If
End Sub

Sub Activa_Linea ()
    
    Puerto.CommPort = Val(Lee_Profile(cInstancia, "Puerto", "1"))
    Puerto.Settings = Lee_Profile(cInstancia, "Velocidad", "9600") + ",O,7,1"
    
    'Set el Buffer de Entrada
    Puerto.OutBufferSize = BUFFERLEN + 3
    Puerto.InBufferSize = BUFFERLEN + 130
    Puerto.Interval = 0
    Puerto.NullDiscard = True
    
    If Not Puerto.PortOpen Then
        Puerto.PortOpen = True
        Port.Picture = LoadPicture(cDirectorio_Programa + "\" + "ON.BMP")
    End If

     'Ok Line
    Puerto.RTSEnable = True
    RTS.Picture = LoadPicture(cDirectorio_Programa + "\" + "ON.BMP")

    'Listo para Recibir Data
    Puerto.DTREnable = True
    DTR.Picture = LoadPicture(cDirectorio_Programa + "\" + "ON.BMP")

    'Para capturar se±ales de env_o y recepci_n
    Puerto.RThreshold = 1
    Puerto.SThreshold = 1
    Puerto.Handshaking = 0

    If Puerto.CTSHolding = True Then
        CTS.Picture = LoadPicture(cDirectorio_Programa + "\" + "ON.bmp")
    Else
        CTS.Picture = LoadPicture(cDirectorio_Programa + "\" + "OFF.bmp")
    End If
        

    If Puerto.DSRHolding = True Then
        DSR.Picture = LoadPicture(cDirectorio_Programa + "\" + "ON.bmp")
    Else
        DSR.Picture = LoadPicture(cDirectorio_Programa + "\" + "OFF.bmp")
    End If
    
     
End Sub
Sub Adiciona_Registro (ByVal cRegistro$)
 nCount = lwrite(FILENUM, cRegistro, Len(cRegistro))
End Sub
Function CalBCC (sStr$, cControl$)
Dim nBCC%, nCnt%, nChar%, cCadena$
nBCC = 0
nCnt = 1
nChar = 0
cCadena = ""
For nCnt = 1 To Len(sStr)
    nChar = Asc(Mid(sStr, nCnt, 1))
    If nChar > 127 Then
      Select Case nChar
            Case 130
                nChar = Asc("e")
            Case 160
                nChar = Asc("a")
            Case 161
                nChar = Asc("i")
            Case 162
                nChar = Asc("o")
            Case 163
                nChar = Asc("u")
            Case 164
                nChar = Asc("n")
            Case 165
                nChar = Asc("N")
            Case Else
                nChar = Asc(".")
       End Select

    End If
    cCadena = cCadena + Chr(nChar)
    nBCC = nBCC Xor nChar
Next
sStr = cCadena
nBCC = nBCC Xor Asc(cControl)
CalBCC = Chr(nBCC And 255)
End Function
Sub Cierra_Archivo ()
    Dim nResult%
    nResult = lclose(FILENUM)
    If nResult <> 0 Then
       Mensaje "No se pudo cerrar Archivo"
    End If
End Sub
Sub Crea_Archivo (cArchivo$)
    FileName = cArchivo
    FILENUM = lcreat(cDirectorio_Recibir + IIf(Right(cDirectorio_Recibir, 1) = "\", "", "\") + FileName, 0)
End Sub
Sub Desactiva_Linea ()

    Terminal.Icon = LoadPicture(cDirectorio_Programa + "\" + "Conn_Off.ico")
    'Drop Line
    Puerto.RTSEnable = False
    RTS.Picture = LoadPicture(cDirectorio_Programa + "\" + "OFF.BMP")
   
   ' 'NO Listo para transmitir
    Puerto.DTREnable = False
    DTR.Picture = LoadPicture(cDirectorio_Programa + "\" + "OFF.BMP")
   
    If Puerto.PortOpen Then
        Puerto.PortOpen = False
        Port.Picture = LoadPicture(cDirectorio_Programa + "\" + "OFF.BMP")
    End If

    If Puerto.CTSHolding = True Then
        CTS.Picture = LoadPicture(cDirectorio_Programa + "\" + "ON.bmp")
    Else
        CTS.Picture = LoadPicture(cDirectorio_Programa + "\" + "OFF.bmp")
    End If
    
    If Puerto.DSRHolding = True Then
        DSR.Picture = LoadPicture(cDirectorio_Programa + "\" + "ON.bmp")
    Else
        DSR.Picture = LoadPicture(cDirectorio_Programa + "\" + "OFF.bmp")
    End If
    
   
End Sub
Function Erase_File (cArchivo)
If Send_Bid() <> FATAL_ERROR Then
   cComando = "14"
   
   cChar = Send_Command(cComando + cArchivo + Space(6) + Space(10), True)
   If cChar = FATAL_ERROR Then
      Erase_File = FATAL_ERROR
      Exit Function
   End If
   If Receive_Status() = "80" Then      ' No existe archivo en Host
      Erase_File = OK
      Exit Function
   End If
   
End If
Erase_File = FATAL_ERROR
End Function
Function Fetch_File (cFile)
If Send_Bid() <> FATAL_ERROR Then
   Terminal.Icon = LoadPicture(cDirectorio_Programa + "\" + "Conn_Rcv.ico")
   cComando = "10"
   cChar = Send_Command(cComando + cFile + Space(6) + Space(10), True)
   If cChar = FATAL_ERROR Then
      Fetch_File = FATAL_ERROR
      Exit Function
   End If
   If Receive_Status() = "81" Then      ' No existe archivo en Host
      Mensaje "  No existe archivo " & cFile
      Fetch_File = OK
      Exit Function
   End If
   If Wait_For_Bid() = OK Then
      cChar = Receive_Command()
      Crea_Archivo Mid(cBlock, 3, 10)
      cChar = Receive_File()
      cChar = Send_Good_Status()
      Fetch_File = OK
      Exit Function
   End If
End If
Fetch_File = FATAL_ERROR
End Function
Sub Form_Load ()
    Dim cFileSubmit$
    
    Me.Show

Do While True
    Set_Vars
    Mensaje "Esperando señal ..."
    Activa_Linea
    
    If Slave() <> FATAL_ERROR Then
        If Op_Enviar.Checked = True Then
           cFileSubmit = Lee_Submit("Enviar")
           Do While cFileSubmit <> ""
              cChar = Send_File(cFileSubmit)
              cFileSubmit = Lee_Submit("Enviar")
           Loop
        End If
        If Op_Recibir.Checked = True Then
           cFileSubmit = Lee_Submit("Recibir")
           Do While cFileSubmit <> ""
              cChar = Fetch_File(cFileSubmit)
              cFileSubmit = Lee_Submit("Recibir")
           Loop
        End If
        If Op_Borrar.Checked = True Then
           cFileSubmit = Lee_Submit("Borrar")
           Do While cFileSubmit <> ""
              cChar = Erase_File(cFileSubmit)
              cFileSubmit = Lee_Submit("Borrar")
           Loop
        End If

        'If cChar = FATAL_ERROR Then
           'lOk = False
           'EXIT
        'End If
        Send_Sign_Off
    End If
    Desactiva_Linea
Loop
End Sub
Sub Form_Unload (Cancel As Integer)
    Desactiva_Linea
    Unload Me
    End
End Sub
Function Lee_Archivo (cBuffer$, nLenArchivo%)
   Dim cBlock$
   cBlock = Space(BUFFERLEN + 3)
   nCount = lread(FILENUM, cBlock, nLenArchivo)
   cBuffer = cBlock
   Lee_Archivo = nCount
End Function
Function Lee_Profile (Aplicacion$, Tema$, Default$) As String
Dim cBuffer$
    cBuffer = Space(40)
    nCnt = GetPrivateProfileString(ByVal Aplicacion, ByVal Tema, Default, cBuffer, Len(cBuffer), "TERMINAL.INI")
    
    Lee_Profile = Mid(cBuffer, 1, nCnt)
End Function
Function Lee_Submit (cOperacion$) As String
Dim nFound%, cFileSubmit$, cNombre$, cExt$

Select Case cOperacion
       Case "Enviar"
            If Len(cArchivos_Enviar) > 0 Then
               If InStr(1, cArchivos_Enviar, ",") > 0 Then
                  cFileSubmit = Left(cArchivos_Enviar, InStr(1, cArchivos_Enviar, ",") - 1)
                  cArchivos_Enviar = Right(cArchivos_Enviar, Len(cArchivos_Enviar) - InStr(1, cArchivos_Enviar, ","))
               Else
                  cFileSubmit = cArchivos_Enviar
                  cArchivos_Enviar = ""
               End If
            Else
                cFileSubmit = ""
            End If
            
       Case "Recibir"
            If Len(cArchivos_Recibir) > 0 Then
               If InStr(1, cArchivos_Recibir, ",") > 0 Then
                  cFileSubmit = Left(cArchivos_Recibir, InStr(1, cArchivos_Recibir, ",") - 1)
                  cArchivos_Recibir = Right(cArchivos_Recibir, Len(cArchivos_Recibir) - InStr(1, cArchivos_Recibir, ","))
               Else
                  cFileSubmit = cArchivos_Recibir
                  cArchivos_Recibir = ""
               End If
            Else
                cFileSubmit = ""
            End If
            
       Case "Borrar"
            If Len(cArchivos_Borrar) > 0 Then
               If InStr(1, cArchivos_Borrar, ",") > 0 Then
                  cFileSubmit = Left(cArchivos_Borrar, InStr(1, cArchivos_Borrar, ",") - 1)
                  cArchivos_Borrar = Right(cArchivos_Borrar, Len(cArchivos_Borrar) - InStr(1, cArchivos_Borrar, ","))
               Else
                  cFileSubmit = cArchivos_Borrar
                  cArchivos_Borrar = ""
               End If
            Else
                cFileSubmit = ""
            End If
            
End Select
'Ahora Descomponer Archivo en Nombre y Extensión
If Len(cFileSubmit) > 0 Then
    If InStr(1, cFileSubmit, ".") > 0 Then
        cNombre = Left(cFileSubmit, InStr(1, cFileSubmit, ".") - 1)
        cExt = Right(cFileSubmit, Len(cFileSubmit) - InStr(1, cFileSubmit, "."))
    Else
        cNombre = cFileSubmit
        cExt = ""
    End If
    
    nFound = InStr(1, cNombre, "?")
    cFileSubmit = IIf(nFound = 0, cNombre, Left(cNombre, nFound - 1) + cLoginId + Right(cNombre, Len(cNombre) - nFound)) + "." + cExt
End If

Lee_Submit = cFileSubmit

End Function
Sub Mensaje (ByVal cMensaje)
Msg.Caption = cMensaje
Msg.Refresh
End Sub
Sub Op_Automático_Click ()
    If Op_Automático.Caption = "&Automático" Then
       Op_Automático.Caption = "&Manual"
    Else
       Op_Automático.Caption = "&Automático"
    End If
    Op_Automático.Checked = True
End Sub
Sub Op_Borrar_Click ()
If Op_Automático.Caption = "&Manual" Then
    Op_Enviar.Checked = False
    Op_Recibir.Checked = False
    Op_Borrar.Checked = True
End If
Terminal.WindowState = 1
End Sub
Sub Op_Enviar_Click ()
    If Op_Automático.Caption = "&Manual" Then
        Op_Enviar.Checked = True
        Op_Recibir.Checked = False
        Op_Borrar.Checked = False
     End If
     Terminal.WindowState = 1

End Sub
Sub Op_Recibir_Click ()
If Op_Automático.Caption = "&Manual" Then
    Op_Enviar.Checked = False
    Op_Recibir.Checked = True
    Op_Borrar.Checked = False
End If
Terminal.WindowState = 1
End Sub
Sub Op_Salir_Click ()
    Unload Me
End Sub
Private Sub Puerto_OnComm ()

    Select Case Puerto.CommEvent
    ' Errors
        'Case comBreak   ' A Break was received.
        ' Code to handle a BREAK goes here.
        'Case comCDTO    ' CD (RLSD) Timeout.
        'Case comCTSTO   ' CTS Timeout.
        'Case comDSRTO   ' DSR Timeout.
        'Case comFrame   ' Framing Error
        'Case comOverrun ' Data Lost.
        'Case comRxOver  ' Receive buffer overflow.
        'Case comRxParity    ' Parity Error.
        'Case comTxFull  ' Transmit buffer full.
             
    ' Events
        'Case comEvCD    ' Change in the CD line.
             
        Case comEvCTS   ' Change in the CTS line.
             If Puerto.CTSHolding = True Then
                CTS.Picture = LoadPicture(cDirectorio_Programa + "\" + "ON.bmp")
             Else
                CTS.Picture = LoadPicture(cDirectorio_Programa + "\" + "OFF.bmp")
             End If
        
        Case comEvDSR   ' Change in the DSR line.
             If Puerto.DSRHolding = True Then
                DSR.Picture = LoadPicture(cDirectorio_Programa + "\" + "ON.bmp")
             Else
                DSR.Picture = LoadPicture(cDirectorio_Programa + "\" + "OFF.bmp")
             End If
             
        'Case comEvRing  ' Change in the Ring Indicator.
        Case comEvReceive   ' Received RThreshold # of chars.
            Receive.Picture = LoadPicture(cDirectorio_Programa + "\" + "ON.BMP")
            Receive.Picture = LoadPicture(cDirectorio_Programa + "\" + "OFF.BMP")
        
        Case comEvSend  ' There are SThreshold number of
                        ' characters in the transmit buffer.
            Send.Picture = LoadPicture(cDirectorio_Programa + "\" + "ON.BMP")
            Send.Picture = LoadPicture(cDirectorio_Programa + "\" + "OFF.BMP")
        Case Else
            MsgBox Puerto.CommEvent
    End Select

End Sub
Function Quitar_CrLf (cBlock$) As String
Dim nFound%, nStart%, nLenBlock%
'IF !::lCrLf
   nStart = 1
   Do
     nFound = InStr(nStart, cBlock, CRLF)
     nLenStr = Len(cBlock)
     If nFound <> 0 Then
        If nFound + 1 = nLenBlock Then
            cBlock = Mid(cBlock, 1, nFound)
            nFound = 0
        Else
            cBlock = Mid(cBlock, 1, nFound - 1) + Mid(cBlock, nFound + 2, Len(cBlock) - nFound)
        End If
        Start = nFound
     End If
   Loop While nFound > 0     'xxxxPP'
'End If
Quitar_CrLf = cBlock
End Function
Function Receive_Block (cBlock$)
Dim nCounter As Integer, cChar As String, nCntCar As Integer
Dim cBuffer$, cString$
  cBuffer = ""
  nCounter = 7
  cChar = ""
  nCntCar = 0
  cBlock = ""
  Do While True
        cChar = ""
        Do While cChar <> EOT And cChar <> ENQ And cChar <> STX And cChar <> ETX And cChar <> ETB
            nCntCar = nCntCar + 1
            cBlock = cBlock + cChar
            cChar = Receive_String(1)
            DoEvents
        Loop

        Select Case cChar
               Case EOT
                    Receive_Block = EOT
                    Exit Function
               Case ENQ
                    nCounter = nCounter - 1
                    If nCounter = 0 Then
                        MsgBox "Fatal Error -> Receive Block ENQ En Receieve_Block"
                        Receive_Block = FATAL_ERROR
                        Exit Function
                    End If
               Case STX
                    If nCntCar <> 1 Then
                        MsgBox "PRIMER CARACTER MALO..."
                        Receive_Block = FATAL_ERROR
                        Exit Function
                    End If
               Case Else
                    If cChar = ETB Or cChar = ETX Then
                        If Receive_String(1) <> CalBCC(cBlock, cChar) Then
                            nCounter = nCounter - 1
                            If nCounter > 0 Then
                                Send_Char (NAK)
                            Else
                                MsgBox "Fatal Error -> Receive Block Error BCC"
                                Receive_Block = FATAL_ERROR
                                Exit Function
                            End If
                        Else
                            Set_ACK
                            Send_Char (ACKP)
                            Receive_Block = cChar
                            Exit Function
                        End If
                    End If
        End Select
Loop
Receive_Block = NUL

End Function
Function Receive_Command ()
Dim cChar$, cBuffer$
   ACKP = ACK0
   cChar = ""
   cBuffer = ""
   cChar = Receive_Block(cBuffer)
   cBlock = cBuffer

   If cChar = ETB Then
      lLastBlock = False
   End If
   If cChar = ETX Then
      lLastBlock = True
   End If
   If cChar = EOT Then
      lLastBlock = True
   End If
   If cChar = FATAL_ERROR Then
      lLastBlock = True
   End If
   cComando = Mid(cBuffer, 1, 2)
Receive_Command = cChar
End Function
Function Receive_Control ()
Dim cControl As String
  cControl = Receive_String(1)
  If cControl = ACK Then
     cControl = cControl + Receive_String(1)
  End If
Receive_Control = cControl
End Function
Function Receive_File ()
Dim cBuffer$, nLenFile%, nCntBlock%
     nCntBlock = 0
     Do While True
Continuar:
        cChar = Receive_Block(cBuffer) ' Por Referencia
        'nLenFile = nLenFile + Len(cBuffer)
        If cChar = ETB Then
           nCntBlock = nCntBlock + 1
           Mensaje " Recibiendo Block Nro. " + Str(nCntBlock)
           
           Adiciona_Registro cBuffer
           GoTo Continuar
        End If
        If cChar = ETX Then
            nCntBlock = nCntBlock + 1
            Adiciona_Registro cBuffer
            Cierra_Archivo
            Mensaje "Recibiendo Ultimo Block Nro." + Str(nCntBlock)
            
            Exit Do
        End If
        If cChar = EOT Then
            Cierra_Archivo
            Exit Do
        End If
        If cChar = FATAL_ERROR Then
            Cierra_Archivo
            Exit Do
        End If
     Loop
     Receive_File = cChar
     Exit Function


End Function
Function Receive_Status ()
  If Wait_For_Bid() = OK Then
     If Receive_Command() = FATAL_ERROR Then
        Receive_Status = NULO
        Exit Function
     End If
     If cComando = "80" Then
        Send_Char (EOT)
        Receive_Status = cComando
        Exit Function
     End If
     If cComando = "81" Then
        Send_Char (EOT)
        Receive_Status = cComando
        Exit Function
     End If
  End If
Receive_Status = NULO
End Function
Function Receive_String (nCantidad%) As String
  Do While Puerto.InBufferCount < nCantidad
     DoEvents
  Loop
  Puerto.InputLen = nCantidad
  Receive_String = Puerto.Input
End Function
Function Send_Bad_Status ()
  If Send_Bid() = FATAL_ERROR Then     'Env_a Respuesta.
     Send_Bad_Status = FATAL_ERROR
     Exit Function
  End If
  cChar = Send_Command("81", True)
  If cChar = FATAL_ERROR Then
     Send_Bad_Status = cChar
     Exit Function
  End If
' ::Send_Char(cEOT)
Send_Bad_Status = NULO
End Function
Function Send_Bid ()
Dim nCounter%, cChar$
 Wait_Millisecs (400)
 nCounter = 7
 cChar = ""
 Do While True

     Send_Char (BID) 'ENQ
     cChar = Receive_Control()

     If cChar = EOT Then
        GoTo Continuar_SB
     End If
     If cChar = ACK0 Then
        Send_Bid = ACK0
        Exit Function
     Else
        MsgBox "Aqui Send_Bid " + Str(Asc(cChar))
        nCounter = nCounter - 1
        If nCounter = 0 Then
            MsgBox "ERROR FATAL -> Send_Bid()"
            Send_Bid = FATAL_ERROR
            Exit Function
        End If
     End If
Continuar_SB:
Loop
Send_Bid = NUL
End Function
Function Send_Block (ByVal cBlock$, lLastBlock%)        'SEND-BLOCK-ETX
Dim nRetry%, cBCC$
    nRetry = 6
    cBCC = ""
    If lLastBlock Then
       cBCC = CalBCC(cBlock, ETX)
       cBlock = STX + cBlock + ETX + cBCC
    Else
       cBCC = CalBCC(cBlock, ETB)
       cBlock = STX + cBlock + ETB + cBCC
    End If

    Do While True
       DoEvents
       Send_Char (cBlock) 'Enviar Block NO CHAR
       DoEvents
       Do While True
          cChar = Receive_Control()
           Select Case cChar
                Case ACKP
                    If lLastBlock Then
                        Send_Char (EOT)
                        Send_Block = EOT
                        Exit Function
                    End If
                    Send_Block = ACKP
                    Exit Function

                Case EOT
                    Print "EOT"
                    Send_Block = EOT
                    Exit Function
                Case Else
                    If cChar <> ACKP Then
                        nRetry = nRetry - 1
                        If nRetry = 0 Then
                            MsgBox "BAD ACKP Send_Block()"
                            Send_Block = FATAL_ERROR
                            Exit Function
                        Else
                            Exit Do
                        End If
                    End If
            End Select
            Select Case cChar
                Case NAK
                    nRetry = nRetry - 1
                    If nRetry = 0 Then
                        MsgBox "NAK Send_Block()"
                        Send_Block = FATAL_ERROR
                        Exit Function
                    Else
                        Exit Do
                    End If
                Case WACK
                    Send_Char (ENQ)
                    GoTo Continuar_Send_Block
            End Select
        Send_Char (ENQ)
Continuar_Send_Block:
       Loop
    Loop
Send_Block = NUL
End Function
Function Send_Command (ByVal cBlock$, ByVal lLastBlock%)       'SEND-BLOCK-ETX
Dim cACKP$, cChar$
ACKP = ACK1
cComando = Mid(cBlock, 1, 2)

Select Case cComando
   Case "02"
    Mensaje "Desconectando"

   Case "03"
    'cFile = SUBSTR(cBlock, 3, 12)
    'nLenFile = SUBSTR(cBlock, 15, 6)
    Mensaje "Enviando Archivo ..."
   Case "10"
     Mensaje "Pidiendo Archivo..."
   Case "14"
     Mensaje "Borrando Archivo de Host"

   End Select
cChar = Send_Block(cBlock, lLastBlock)
Send_Command = cChar
End Function
Sub Send_Char (ByVal Cadena$)
    Puerto.Output = Cadena
    Do While Puerto.OutBufferCount > 0
       DoEvents
    Loop
End Sub
Function Send_File (cFile$)
Dim nBytesRead%, cChar$, cBuffer$, nBytesTrn%, nCntBlock%
cBuffer = Space(BUFFERLEN + 4)
nCntBlock = 0
cComando = "03"
nLenFile = FileLen(cDirectorio_Enviar + cFile)
If nLenFile = -1 Or nLenFile = 0 Then
   MsgBox "  No existe archivo"
End If

If Send_Bid() <> FATAL_ERROR Then
   Terminal.Icon = LoadPicture(cDirectorio_Programa + "\" + "Conn_Snd.ico")
   ACKP = ACK1
   lLastBlock = False
   cChar = Send_Command(cComando + cFile + Right(Str(nLenFile), 6) + Space(10), lLastBlock)
   If cChar = FATAL_ERROR Then
      Send_File = cChar
      Exit Function
   End If
   Mensaje "Abriendo Archivo..."
   Set_ACK
   Abre_Archivo cFile
   Do While True
      nCntBlock = nCntBlock + 1
      
      nBytesRead = Lee_Archivo(cBuffer, BUFFERLEN)
      If nBytesRead = BUFFERLEN Then
         Mensaje "Enviando Block Nro. " + Str(nCntBlock)
         cBlock = Left(cBuffer, nBytesRead)
         lLastBlock = False
      Else
        Mensaje "Enviando Ultimo Block Nro. " + Str(nCntBlock)
        
        
        If nBytesRead > 1 Then         ' Verificar alg·n error.
            cBlock = Left(cBuffer, nBytesRead - 1)
            lLastBlock = True
            Cierra_Archivo
        Else
            lLastBlock = True
            cBlock = ""
            Cierra_Archivo
        End If
      End If
      nBytesTrn = nBytesTrn + Len(cBlock)
      
      cBlock = Quitar_CrLf(cBlock)
      cChar = Send_Block(cBlock, lLastBlock)
      Set_ACK
      If cChar = FATAL_ERROR Then
         Send_File = FATAL_ERROR
         Exit Function
      End If
      If cChar = EOT Then
        If Receive_Status() = "81" Then
            Send_File = FATAL_ERROR
            Exit Function
        Else
            Send_File = OK
            Exit Function
        End If
      End If
   Loop
End If
Send_File = NULO
End Function
Function Send_Good_Status () As String
  Dim cChar$

  If Send_Bid() = FATAL_ERROR Then  'Pide Linea
     Send_Good_Status = FATAL_ERROR
     Exit Function
  End If

  cChar = Send_Command("80", True)
  If cChar = FATAL_ERROR Then
     Send_Good_Status = cChar
     Exit Function
  End If
  Send_Good_Status = ""

End Function
Sub Send_Sign_Off ()
    If Send_Bid() <> FATAL_ERROR Then
       cChar = Send_Command("0200" + Space(26), True)
    End If
End Sub
Sub Send_String (ByVal cCadena$)
Dim nLen%, nCnt%
    nLen = Len(cCadena)
    For nCnt = 1 To nLen
       Send_Char (Mid(cCadena, nCnt, 1))
       DoEvents
    Next
End Sub
Sub Set_ACK ()
    ACKP = IIf(ACKP = ACK1, ACK0, ACK1)
End Sub
Sub Set_Time_Mode ()
Dim nHora_Ini%, nHora_Fin%, nTime%
If Op_Automático.Caption = "&Automático" Then
   nTime = Val(Left(Format(Time, "hh:mm"), 2)) * 60 + Val(Mid(Format(Time, "hh:mm"), 4, 2))
   If Len(cHora_Enviar) = 11 Then
        nHora_Ini = Val(Left(cHora_Enviar, 2)) * 60 + Val(Mid(cHora_Enviar, 4, 2))
        nHora_Fin = Val(Mid(cHora_Enviar, 7, 2)) * 60 + Val(Mid(cHora_Enviar, 10, 2)) ' + IIf(Val(Mid(cHora_Enviar, 10, 2)) < 24, 0, 24)
        If nHoraIni <= nTime And nHora_Fin >= nTime Then
            Op_Enviar.Checked = True
        Else
            Op_Enviar.Checked = False
        End If
   End If
   If Len(cHora_Recibir) = 11 Then
        nHora_Ini = Val(Left(cHora_Recibir, 2)) * 60 + Val(Mid(cHora_Recibir, 4, 2))
        nHora_Fin = Val(Mid(cHora_Recibir, 7, 2)) * 60 + Val(Mid(cHora_Recibir, 10, 2))
        If nHoraIni <= nTime And nHora_Fin >= nTime Then
            Op_Recibir.Checked = True
        Else
            Op_Recibir.Checked = False
        End If
   End If
   If Len(cHora_Borrar) = 11 Then
        nHora_Ini = Val(Left(cHora_Borrar, 2)) * 60 + Val(Mid(cHora_Borrar, 4, 2))
        nHora_Fin = Val(Mid(cHora_Borrar, 7, 2)) * 60 + Val(Mid(cHora_Borrar, 10, 2))
        If nHoraIni <= nTime And nHora_Fin >= nTime Then
            Op_Borrar.Checked = True
        Else
            Op_Borrar.Checked = False
        End If
   End If
   
End If
End Sub
Sub Set_Vars ()
Dim nFound%
    NUL = Chr(0)
    SOH = Chr(1)
    STX = Chr(2)
    ETX = Chr(3)
    EOT = Chr(4)
    ENQ = Chr(5)       'Enquiry
    BID = Chr(5)
    DLE = Chr(16)
    NAK = Chr(21)
    ETB = Chr(23)

    ACK = Chr(16)
    ACK0 = Chr(16) + Chr(48)
    ACK1 = Chr(16) + Chr(49)
    WACK = Chr(16) + Chr(59)

    ACKP = ACK0

    FATAL_ERROR = Chr(220)
    OK = Chr(200)

    lLastBlock = True
    'cBlock = ""
    CRLF = Chr(13) + Chr(10)
    BUFFERLEN = 512
    If lActivo = False Then
        Select Case GetModuleUsage(GetModuleHandle("TERMINAL.EXE"))
            Case 1
                cInstancia = "Terminal Uno"
                Me.Caption = "Terminal:1"
            Case 2
                cInstancia = "Terminal Dos"
                Me.Caption = "Terminal:2"
            Case 3
                cInstancia = "Terminal Tres"
                Me.Caption = "Terminal:3"
            Case 4
                cInstancia = "Terminal Cuatro"
                Me.Caption = "Terminal:4"
            Case Else
                cInstancia = "Terminal Uno"
                Me.Caption = "Terminal:1"
        End Select
        cDirectorio_Programa = Space(100)
        nFound = GetModuleFileName(GetModuleHandle("TERMINAL.EXE"), cDirectorio_Programa, Len(cDirectorio_Programa))
        cDirectorio_Programa = Mid(cDirectorio_Programa, 1, nFound)
        If Len(cDirectorio_Programa) = 0 Then
           cDirectorio_Programa = "C:\PROGRAMA\TERMINAL.EXE"
        End If
        
        nFound = InStr(1, cDirectorio_Programa, "TERMINAL.EXE")
        cDirectorio_Programa = Left(cDirectorio_Programa, nFound - 2)
        cHora_Enviar = Lee_Profile(cInstancia, "Hora_Enviar", "")
        cHora_Recibir = Lee_Profile(cInstancia, "Hora_Recibir", "")
        cHora_Borrar = Lee_Profile(cInstancia, "Hora_Borrar", "")
        cDirectorio_Enviar = Lee_Profile(cInstancia, "Directorio_Enviar", "SUBE\")
        cDirectorio_Recibir = Lee_Profile(cInstancia, "Directorio_Recibir", "BAJA\")
        Op_Automático.Caption = IIf(Lee_Profile(cInstancia, "Modo_Automatico", "False") = "True", "&Automático", "&Manual")
        Op_Enviar.Checked = IIf(Lee_Profile(cInstancia, "Modo_Automatico", "False") = "True", False, True)
        lActivo = True
    Else
        Me.Caption = Left(Me.Caption, 10)
    End If
    cArchivos_Enviar = Lee_Profile(cInstancia, "Archivos_Enviar", "")
    cArchivos_Recibir = Lee_Profile(cInstancia, "Archivos_Recibir", "")
    cArchivos_Borrar = Lee_Profile(cInstancia, "Archivos_Borrar", "")

End Sub
Function Slave ()
Dim cChar$
Do While True
    If Puerto.CTSHolding = True Then
        Terminal.Icon = LoadPicture(cDirectorio_Programa + "\" + "Conn_On.Ico")
        Exit Do
    End If
    DoEvents
    Set_Time_Mode
Loop

cChar = ""
Do While True
    cChar = Wait_For_Bid()
    If cChar = FATAL_ERROR Then
       Slave = FATAL_ERROR
       Exit Function
    End If

    If cChar = OK Then
       If Receive_Command() = FATAL_ERROR Then
          Slave = FATAL_ERROR
          Exit Function
       End If
       Select Case cComando

            Case "02"
                Mensaje "Sign Off"
                Slave = FATAL_ERROR
                Exit Function
          
            Case "08"     ' Ejecutar Submit.
                 Mensaje "Modo Comandos"
                 cLoginId = RTrim(Mid(cBlock, 3, 8))
                 Me.Caption = Me.Caption + ":" + cLoginId
                 If True Then
                    cChar = Send_Good_Status()
                    Wait_Millisecs (1)
                    Slave = OK
                    Exit Function
                 Else
                    cChar = Send_Bad_Status()
                    Slave = FATAL_ERROR
                    Exit Function
                 End If

            Case "80"      ' Good Status
                Mensaje "Good Status"
                Send_Char (EOT)

            Case "81"       ' Bad Status
                Mensaje "Bad Status"
                If Send_Bid() = FATAL_ERROR Then         '//Envía Respuesta.
                    Slave = FATAL_ERROR
                    Exit Function
                End If
                Send_Char (EOT)

            Case "AM"            ' Recibir confirmación.
                Mensaje "Sign On"
                cChar = Send_Good_Status()

            
       End Select
    End If
 Loop
Slave = ""
End Function
Function Wait_For_Bid ()
PauseTime = 21
Start = Timer
Do While True  'Timer < Start + PauseTime 'WAITPERIOD()
   If Puerto.InBufferCount > 0 Then
      Puerto.InputLen = 1
      If Puerto.Input = ENQ Then
         Send_Char (ACK0)
         Wait_For_Bid = OK
         Exit Function
      End If
   End If
   DoEvents
Loop
Wait_For_Bid = FATAL_ERROR
End Function
Sub Wait_Millisecs (ByVal Millisecs As Long)
    Dim PauseTimer As Long, Start As Long
    PauseTime = Millisecs
    Start = GetTickCount()
    Do While GetTickCount() < Start + PauseTime
    Loop
End Sub
